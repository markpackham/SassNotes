/*
Compile sass

sass main.scss main.css

The sass command above takes in two arguments:
The input (main.scss)
The location of where to place that output (main.css)
*/

/*NESTING  (main reason to bother with Sass)*/
@import url(https://fonts.googleapis.com/css?family=Pacifico);
//Add variables here:
$translucent-white: rgba(255, 255, 255, 0.3);
$icon-square-length: 300px;

h1 {
  font-family: Roboto, sans-serif;
  text-align: center;
}

.banner {
  font-family: "Pacifico", cursive;
  height: 400px;
  background-image: url("lemonade.jpg");
  border : {
    top: 4px solid black;
    bottom: 4px solid black;
  }

  .slogan {
    position: absolute;
    border: 4px solid black;
    top: 200px;
    left: 25%;
    width: 50%;
    height: 200px;
    background-color: $translucent-white;
    text-align: center;

    span {
      font-size: 24px;
      line-height: 200px;
    }
  }
}

.container {
  text-align: center;
  font-family: "Pacifico", cursive;

  .icon {
    display: inline-block;
    margin: 2%;
    border: 4px solid black;
    font-size: 32px;
    width: $icon-square-length;
    height: $icon-square-length;
  }
}

/* Nesting Properties   if you append a : colon suffix after the name of the property*/
@import url(https://fonts.googleapis.com/css?family=Pacifico);
//Add variables here:

h1 {
  font-family: Roboto, sans-serif;
  text-align: center;
}

.banner {
  font-family: "Pacifico", cursive;
  height: 400px;
  background-image: url("lemonade.jpg");
  /* We nested border which is a property rather than a selector */
  border : {
    top: 4px solid black;
    bottom: 4px solid black;
  }

  .slogan {
    position: absolute;
    border: 4px solid black;
    top: 200px;
    left: 25%;
    width: 50%;
    height: 200px;

    span {
      position: absolute;
      text-align: center;
      line-height: 200px;
    }
  }
}

.container {
  text-align: center;
  font-family: "Pacifico", cursive;

  .icon {
    display: inline-block;
    margin: 2%;
    border: 4px solid black;
    font-size: 32px;
  }
}

/* Variables (now available in latest version of CSS), still easier to write in Sass
just using "$"  so $translucent-white: rgba(255,255,255,0.3);
call the variable like this
background-color: $translucent-white;

You can assign to variables
Numbers, such as 8.11, 12, and 10px. Notice that while 10 has a unit of px associated with it, it is still considered a number.
Strings of text, with and without quotes. Some examples are "potato", 'tomato', span.
Booleans, or simply true and false.
null, which is considered an empty value.
Lists & Maps

Lists can be separated by either spaces or commas. For example, the following list denotes font properties, such as:
1.5em Helvetica bold;
or
Helvetica, Arial, sans-serif;

*/

/*
Nesting is the process of placing child selectors and properties in the scope of a parent selector. This allows a programmer to draw DOM relationships and avoid repetition.

2. Variables make it easy to update code and reference values by allowing you to assign an identifier to a value.

3. Sass Data Types include:

Numbers
Strings
Booleans
null
Lists
Maps
Nesting and variables are just two ways that Sass keeps stylesheets clean. In the next unit, you’ll learn about other Sass constructs that serve the same purpose.
*/

/* & Selector in Nesting */
/*
the & character is used to specify exactly where a parent selector should be inserted. It also helps write psuedo classes in a much less repetitive way.

For example, the following Sass:
*/
.notecard {
  &:hover {
    @include transform(rotatey(-180deg));
  }
}
/*
will compile to the following CSS:
*/
.notecard:hover {
  transform: rotatey(-180deg);
}

/* 
mixin lets you make groups of CSS declarations that you want to reuse throughout your site. 
*/
@mixin backface-visibility {
  backface-visibility: hidden;
  -webkit-backface-visibility: hidden;
  -moz-backface-visibility: hidden;
  -ms-backface-visibility: hidden;
  -o-backface-visibility: hidden;
}
/*
The following code:
*/
.notecard {
  .front,
  .back {
    width: 100%;
    height: 100%;
    position: absolute;

    @include backface-visibility;
  }
}
/*
is equivalent to the following CSS:
*/
.notecard .front,
.notecard .back {
  width: 100%;
  height: 100%;
  position: absolute;

  backface-visibility: hidden;
  -webkit-backface-visibility: hidden;
  -moz-backface-visibility: hidden;
  -ms-backface-visibility: hidden;
  -o-backface-visibility: hidden;
}

/*
Default Value Argument
Mixin arguments can be assigned a default value in the mixin definition by using a special notation.

A default value is assigned to the argument if no value is passed in when the mixin is included. 
Defining a default value for each argument is optional.
The notation is as follows where hidden is made as a default value in all properties
*/
@mixin backface-visibility($visibility: hidden) {
  backface-visibility: $visibility;
  -webkit-backface-visibility: $visibility;
  -moz-backface-visibility: $visibility;
  -ms-backface-visibility: $visibility;
  -o-backface-visibility: $visibility;
}

/*
Mixin facts
Mixins can take multiple arguments.
Sass allows you to explicitly define each argument in your @include statement.
When values are explicitly specified you can send them out of order.
If a mixin definition has a combination of arguments with and without a default value, you should define the ones with no default value first.
Mixins can be nested.
*/

@mixin dashed-border($width, $color: #fff) {
  border: {
    color: $color;
    width: $width;
    style: dashed;
  }
}

span {
  //only passes non-default argument
  @include dashed-border(3px);
}

p {
  //passes both arguments
  @include dashed-border(3px, green);
}

div {
  //passes out of order but explicitly defined
  @include dashed-border(color: purple, width: 5px);
}

//Map
//create a map with these properties in case we ever want to update or reference them.
$college-ruled-style: (
  direction: to bottom,
  width-percent: 15%,
  stripe-color: blue,
  stripe-background: white
);
//When we include our mixin, we can then pass in these arguments in a map with the following ... notation:

.definition {
  width: 100%;
  height: 100%;
  @include stripes($college-ruled-style...);
}

//String Interpolation (just like back ticks in JavaScript & $() in C#
//In Sass, string interpolation is the process of placing a variable string in the middle of two other strings.
/*
In a mixin context, interpolation is handy when you want to make use of variables in selectors or file names. 
The notation is as follows:
*/

@mixin photo-content($file) {
  content: url(#{$file}.jpg); //string interpolation
  object-fit: cover;
}
.photo {
  @include photo-content("titanosaur");
  width: 60%;
  margin: 0px auto;
}
//String interpolation would enable the following CSS:

.photo {
  content: url(titanosaur.jpg);
  width: 60%;
  margin: 0px auto;
}

//& Selector in Mixins
/*
Sass allows & selector usage inside of mixins. The flow works much like you think it would:
The & selector gets assigned the value of the parent at the point where the mixin is included.
If there is no parent selector, then the value is null and Sass will throw an error.
*/
@mixin text-hover($color) {
  &:hover {
    color: $color;
  }
}
//In the above, the value of the parent selector will be assigned based on the parent at the point where it is invoked.

.word {
  //SCSS:
  display: block;
  text-align: center;
  position: relative;
  top: 40%;
  @include text-hover(red);
}
//The above will compile to the following CSS:

.word {
  display: block;
  text-align: center;
  position: relative;
  top: 40%;
}
.word:hover {
  color: red;
}
//Notice that the mixin inherited the parent selector .word because that was the parent at the point where the mixin was included.

/*
Mixins are a powerful tool that allow you to keep your code DRY. Their ability to take in arguments, assign default values to those arguments, 
and accept said arguments in whatever format is most readable and convenient for you makes the mixin Sass’s most popular directive.

The & selector* is a Sass construct that allows for expressive flexibility by referencing the parent selector when working with 
CSS psuedo elements and classes.

String interpolation is the glue that allows you to insert a string in the middle of another when it is in a variable format. 
Its applications vary, but the ability to interpolate is especially useful for passing in file names.
*/

//Functions
//fade-out makes a color more transparent by taking a number between 0 and 1 and decreasing opacity, or the alpha channel, by that amount:
$color: rgba(39, 39, 39, 0.5);
$amount: 0.1;
$color2: fade-out($color, $amount); //rgba(39, 39, 39, 0.4)
//The fade-in color function changes a color by increasing its opacity:

$color: rgba(55, 7, 56, 0.5);
$amount: 0.1;
$color2: fade-in($color, $amount); //rgba(55,7,56, 0.6)
//The function adjust-hue($color, $degrees) changes the hue of a color by taking color and a number of degrees
//(usually between -360 degrees and 360 degrees), and rotate the color wheel by that amount.
